#include "DHTesp.h" //Inclusão das bibliotecas necessárias para realizar o
#include <WiFi.h>   //projeto
#include <HTTPClient.h>

#define LEDR 25 //Definindo a pinagem dos leds e do sensor, afim de obter
#define LEDB 26 //resultados digitais e visuais
#define SENSOR 15
DHTesp sensordht;

const char* ssid = "Wokwi-GUEST"; // Definindo a conexão da ESP32, com o
const char* password = "";         //ThingSpeak e com a internet
const char* url = "https://api.thingspeak.com/update?api_key=GDNFLJEDGGV2M5O9&field1=0";
WiFiClient  client;
HTTPClient http;

void setup() {
  Serial.begin(115200);
  sensordht.setup(SENSOR, DHTesp::DHT22);
  pinMode(LEDR, OUTPUT); pinMode(LEDB, OUTPUT); //Configurando a pinagem 
  WiFi.begin(ssid, password);                   //para que mande energia

  while(WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.println("Conectando no Wifi...");
    }
  
  Serial.println("Conectado");
  http.begin(url); //Iniciando conexão com o ThingSpeak
}

void loop() {
  delay(5000);
  int temp = sensordht.getTemperature();
  int umi = sensordht.getHumidity();
  Serial.println("Temperatura: " + String(temp) + "°C");
  Serial.println("Umidade: " + String(umi) + "%");
  String url2 = "https://api.thingspeak.com/update?api_key=GDNFLJEDGGV2M5O9&field1=";
  String url3 = "&field2=";
  String url4 = url2 + temp + url3 + umi;
  Serial.println(url4);
  http.begin(url4);
  int httpCode = http.GET();   
  if (httpCode > 0) {
    String payload = http.getString();
    Serial.println(httpCode);
    Serial.println(payload);
  }else {
    Serial.println("Error on HTTP request");
  }

  if (temp > 35){ //Led acende caso a temperatura seja maior que 35 graus celsius
    digitalWrite(LEDR, HIGH);
  } else {
    digitalWrite(LEDR, LOW);
  }

  if(umi > 70){ //Led acende caso a umidade seja maior que 70%
    digitalWrite(LEDB, HIGH);
  } else {
    digitalWrite(LEDB, LOW);
  }
}
